-- CASE

SELECT 
    job_title_short,
    job_location,
    CASE 
        WHEN job_location = 'Anywhere' THEN 'Remote'
        WHEN job_location = 'New York, NY' THEN 'Local'
        ELSE 'Onsite'
    END AS location_category
FROM job_postings_fact;

--HOW MANY JOBS ARE LOCAL AND REMOTE SO WE CAN APPLY TO

SELECT 
    COUNT(job_id) AS number_of_jobs,
    CASE 
        WHEN job_location = 'Anywhere' THEN 'Remote'
        WHEN job_location = 'New York, NY' THEN 'Local'
        ELSE 'Onsite'
    END AS location_category
FROM job_postings_fact
WHERE job_title_short = 'Data Analyst'
GROUP BY location_category;

--SUBQUERIES and CTEs

SELECT *
FROM (
    SELECT *
    FROM job_postings_fact
    WHERE EXTRACT(MONTH FROM job_posted_date) = 1
) AS january_jobs;

--WE WANT TO SELECT JOBS THAT DON"T HAVE ANY REQUARIENMNETS FOR A DEGREE

SELECT company_id, job_no_degree_mention
FROM job_postings_fact
WHERE job_no_degree_mention = true;

SELECT company_id, name AS company_name
FROM company_dim
WHERE company_id IN (
    SELECT company_id
    FROM job_postings_fact
    WHERE job_no_degree_mention = true
    ORDER BY company_id
)

/*
FIND COMPANIES THAT HAVE THE MOST JOB OPENINGS
-Get the total number of job postings per company id (job_postings_fact)
-Return the total number of job withs the company name (company_dim)
*/

WITH company_job_count AS (
 SELECT company_id, COUNT(*) AS total_jobs
 FROM job_postings_fact
 GROUP BY company_id
 )

-- WE GONNA BE USING LEFT JOIN (company A company_dim) 

SELECT company_dim.name AS company_name, company_job_count.total_jobs
FROM company_dim
LEFT JOIN company_job_count
    ON company_dim.company_id=company_job_count.company_id
ORDER BY total_jobs DESC

/*
Identify the top 5 skills that are most frequently mentioned in job postings.
Use a subquery to find skills IDs with the highest counts in the 'skills_job_dim' 
And then join the result with the skills_dim table to get the skill names
*/

SELECT skills_dim.skills,
       top_skills.skills_count
FROM (
    SELECT skill_id, COUNT(skill_id) AS skills_count FROM skills_job_dim
    GROUP BY skill_id
    ORDER BY skills_count DESC
    LIMIT 5
) AS top_skills
LEFT JOIN skills_dim
    ON top_skills.skill_id=skills_dim.skill_id


/*
Determine the size category ('Small' 'Medium' 'Large') for each company by first identifying
the number of job postings they have. 
Use a subquery to calculate the total job postings per company
'Small' < 10 'Medium' between 10 and 50 'Large' > 50
Implement a subquery to aggregate job counts per company before classifying them based on size
*/

SELECT company_dim.name AS company_name, job_count_data.job_count,
    CASE
        WHEN job_count_data.job_count < 10 THEN 'Small'
        WHEN job_count_data.job_count BETWEEN 10 AND 50 THEN 'Medium'
        WHEN job_count_data.job_count > 50 THEN 'Large'
    END AS company_size
FROM (SELECT company_id, COUNT(*) AS job_count
      FROM job_postings_fact
      GROUP BY company_id
) AS job_count_data
LEFT JOIN company_dim
    ON job_count_data.company_id=company_dim.company_id;

/*
Find the count of the number of remote job positions per skill
 - Display the top 5 skills by their deman in remote jobs
 - Include skill ID, name, and count of postings requiring the skill
*/

WITH remote_job_skills AS (
SELECT skill_id, COUNT(*) AS skill_count
FROM skills_job_dim AS skills_to_job
INNER JOIN job_postings_fact AS job_postings
   ON skills_to_job.job_id=job_postings.job_id
WHERE job_work_from_home = TRUE AND job_title_short = 'Data Analyst'
GROUP BY skill_id
)

SELECT skills.skill_id, skills AS skill_name, skill_count
FROM remote_job_skills
INNER JOIN skills_dim AS skills
    ON skills.skill_id=remote_job_skills.skill_id
ORDER BY skill_count DESC
LIMIT 5;

SELECT job_title_short, company_id, job_location
FROM january_jobs
UNION ALL
SELECT job_title_short, company_id, job_location
FROM february_jobs
UNION ALL
SELECT job_title_short, company_id, job_location
FROM march_jobs

/*
Find job postings for the 1st quater that have a salary greater than $70
- Combine job posting tables from he 1st quater of 2023 (Jan-March)
- Gets job postings with an average yearly salary > $70000
*/

SELECT quater1_job_postings.job_title_short, 
       quater1_job_postings.job_via, 
       quater1_job_postings.job_location,
       quater1_job_postings.job_posted_date::DATE,
       quater1_job_postings.salary_year_avg
FROM (
     SELECT *
     FROM january_jobs
     UNION ALL
     SELECT *
     FROM february_jobs
     UNION ALL
     SELECT * 
     FROM march_jobs
) AS quater1_job_postings
WHERE quater1_job_postings.salary_year_avg > 70000 AND quater1_job_postings.job_title_short = 'Data Analyst'
ORDER BY quater1_job_postings.salary_year_avg DESC;